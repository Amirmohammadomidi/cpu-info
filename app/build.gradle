apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply from: "$rootDir/reports/jacoco.gradle"
apply from: "$rootDir/versioning.gradle"

Properties signingProperties = getReleaseSigningConfig()

android {
    compileSdkVersion compiledSdk
    buildToolsVersion buildTools

    defaultConfig {
        applicationId "com.kgurgul.cpuinfo"
        minSdkVersion project.minSdk
        targetSdkVersion project.targetSdk
        versionCode generatedVersionCode
        versionName generatedVersionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        releaseVersion {
            storeFile file(signingProperties.getProperty('keyPath'))
            storePassword signingProperties.getProperty('keyPass')
            keyAlias signingProperties.getProperty('keyAlias')
            keyPassword signingProperties.getProperty('keyPass')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.releaseVersion
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
            applicationIdSuffix ".debug"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions.incremental = true

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

androidExtensions {
    experimental = true
}

kapt {
    mapDiagnosticLocations = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$project.kotlinVersion"

    implementation "androidx.appcompat:appcompat:$project.appCompat"
    implementation "com.google.android.material:material:$project.material"
    implementation "androidx.preference:preference:$project.preference"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$project.swiperefreshlayout"

    // Bus
    implementation "org.greenrobot:eventbus:$project.eventBus"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$project.rxJava"
    implementation "io.reactivex.rxjava2:rxandroid:$project.rxAndroid"

    // GSON
    implementation "com.google.code.gson:gson:$project.gson"

    // Dagger
    implementation "com.google.dagger:dagger:$project.dagger"
    implementation "com.google.dagger:dagger-android-support:$project.dagger"
    kapt "com.google.dagger:dagger-compiler:$project.dagger"
    kapt "com.google.dagger:dagger-android-processor:$project.dagger"

    // Timber
    implementation "com.jakewharton.timber:timber:$project.timber"

    // Google arch
    implementation "androidx.lifecycle:lifecycle-extensions:$project.archLifecycle"
    kapt "androidx.lifecycle:lifecycle-compiler:$project.archLifecycle"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$project.navigation"
    implementation "android.arch.navigation:navigation-ui-ktx:$project.navigation"

    // Glide
    implementation "com.github.bumptech.glide:glide:$project.glide"
    kapt "com.github.bumptech.glide:compiler:$project.glide"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$project.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$project.coroutines"

    testImplementation "junit:junit:$project.jUnit"
    testImplementation "org.mockito:mockito-core:$project.mockito"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$project.mockitoKotlin"
    testImplementation "androidx.arch.core:core-testing:$project.coreTesting"
    testImplementation "org.robolectric:robolectric:$project.robolectric"
    androidTestImplementation "androidx.test:runner:$project.testRunner"
    androidTestImplementation "androidx.test:rules:$project.testRunner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$project.espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$project.espresso"
}

def getReleaseSigningConfig() {
    try {
        Properties localProp = new Properties()
        localProp.load(project.rootProject.file('local.properties').newDataInputStream())
        if (localProp.getProperty('keyPath') == null
                || localProp.getProperty('keyPass') == null
                || localProp.getProperty('keyAlias') == null) {
            return getDebugSigningConfig()
        } else {
            return localProp
        }
    } catch (FileNotFoundException ignored) {
        return getDebugSigningConfig()
    }
}

def getDebugSigningConfig() {
    logger.warn("Using default debug key instead of release key!")
    Properties properties = new Properties()
    def debugKeyDir = System.getenv('HOME') + "/.android/debug.keystore"
    properties.setProperty('keyPath', debugKeyDir)
    properties.setProperty('keyPass', 'android')
    properties.setProperty('keyAlias', 'androiddebugkey')
    properties.setProperty('keyPass', 'android')
    return properties
}
